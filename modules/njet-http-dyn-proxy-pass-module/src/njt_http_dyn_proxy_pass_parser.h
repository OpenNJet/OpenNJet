

/* This file was generated by JSON Schema to C.
 * Any changes made to it will be lost on regeneration. 

 * Copyright (C) 2021-2023  TMLake(Beijing) Technology Co., Ltd.
 */

#ifndef NJT_HTTP_DYN_PROXY_PASS_PARSER_H
#define NJT_HTTP_DYN_PROXY_PASS_PARSER_H
#include <stdint.h>
#include <stdbool.h>
#include "njt_core.h"
#include "js2c_njet_builtins.h"
/* ===================== Generated type declarations ===================== */
typedef struct proxypass_locationDef_t_s proxypass_locationDef_t; //forward decl for public definition
typedef njt_str_t proxypass_locationDef_location_t;

typedef njt_str_t proxypass_locationDef_proxy_pass_t;

typedef proxypass_locationDef_t proxypass_locationDef_locations_item_t; //ref def
typedef njt_array_t  proxypass_locationDef_locations_t;
typedef struct proxypass_locationDef_t_s {
    proxypass_locationDef_location_t location;
    proxypass_locationDef_proxy_pass_t proxy_pass;
    proxypass_locationDef_locations_t *locations;
    unsigned int is_location_set:1;
    unsigned int is_proxy_pass_set:1;
    unsigned int is_locations_set:1;
} proxypass_locationDef_t;

proxypass_locationDef_locations_item_t* get_proxypass_locationDef_locations_item(proxypass_locationDef_locations_t *out, size_t idx);
proxypass_locationDef_location_t* get_proxypass_locationDef_location(proxypass_locationDef_t *out);
proxypass_locationDef_proxy_pass_t* get_proxypass_locationDef_proxy_pass(proxypass_locationDef_t *out);
// CHECK ARRAY not exceeding bounds before calling this func
proxypass_locationDef_locations_t* get_proxypass_locationDef_locations(proxypass_locationDef_t *out);
void set_proxypass_locationDef_location(proxypass_locationDef_t* obj, proxypass_locationDef_location_t* field);
void set_proxypass_locationDef_proxy_pass(proxypass_locationDef_t* obj, proxypass_locationDef_proxy_pass_t* field);
int add_item_proxypass_locationDef_locations(proxypass_locationDef_locations_t *src, proxypass_locationDef_locations_item_t* items);
proxypass_locationDef_locations_t* create_proxypass_locationDef_locations(njt_pool_t *pool, size_t nelts);
void set_proxypass_locationDef_locations(proxypass_locationDef_t* obj, proxypass_locationDef_locations_t* field);
proxypass_locationDef_t* create_proxypass_locationDef(njt_pool_t *pool);
typedef njt_str_t proxypass_servers_item_listens_item_t;

typedef njt_array_t  proxypass_servers_item_listens_t;
typedef njt_str_t proxypass_servers_item_serverNames_item_t;

typedef njt_array_t  proxypass_servers_item_serverNames_t;
typedef proxypass_locationDef_t proxypass_servers_item_locations_item_t; //ref def
typedef njt_array_t  proxypass_servers_item_locations_t;
typedef struct proxypass_servers_item_t_s {
    proxypass_servers_item_listens_t *listens;
    proxypass_servers_item_serverNames_t *serverNames;
    proxypass_servers_item_locations_t *locations;
    unsigned int is_listens_set:1;
    unsigned int is_serverNames_set:1;
    unsigned int is_locations_set:1;
} proxypass_servers_item_t;

typedef njt_array_t  proxypass_servers_t;
typedef struct proxypass_t_s {
    proxypass_servers_t *servers;
    unsigned int is_servers_set:1;
} proxypass_t;

proxypass_servers_item_listens_item_t* get_proxypass_servers_item_listens_item(proxypass_servers_item_listens_t *out, size_t idx);
proxypass_servers_item_serverNames_item_t* get_proxypass_servers_item_serverNames_item(proxypass_servers_item_serverNames_t *out, size_t idx);
proxypass_servers_item_locations_item_t* get_proxypass_servers_item_locations_item(proxypass_servers_item_locations_t *out, size_t idx);
// CHECK ARRAY not exceeding bounds before calling this func
proxypass_servers_item_listens_t* get_proxypass_servers_item_listens(proxypass_servers_item_t *out);
// CHECK ARRAY not exceeding bounds before calling this func
proxypass_servers_item_serverNames_t* get_proxypass_servers_item_serverNames(proxypass_servers_item_t *out);
// CHECK ARRAY not exceeding bounds before calling this func
proxypass_servers_item_locations_t* get_proxypass_servers_item_locations(proxypass_servers_item_t *out);
proxypass_servers_item_t* get_proxypass_servers_item(proxypass_servers_t *out, size_t idx);
// CHECK ARRAY not exceeding bounds before calling this func
proxypass_servers_t* get_proxypass_servers(proxypass_t *out);
int add_item_proxypass_servers_item_listens(proxypass_servers_item_listens_t *src, proxypass_servers_item_listens_item_t* items);
proxypass_servers_item_listens_t* create_proxypass_servers_item_listens(njt_pool_t *pool, size_t nelts);
void set_proxypass_servers_item_listens(proxypass_servers_item_t* obj, proxypass_servers_item_listens_t* field);
int add_item_proxypass_servers_item_serverNames(proxypass_servers_item_serverNames_t *src, proxypass_servers_item_serverNames_item_t* items);
proxypass_servers_item_serverNames_t* create_proxypass_servers_item_serverNames(njt_pool_t *pool, size_t nelts);
void set_proxypass_servers_item_serverNames(proxypass_servers_item_t* obj, proxypass_servers_item_serverNames_t* field);
int add_item_proxypass_servers_item_locations(proxypass_servers_item_locations_t *src, proxypass_servers_item_locations_item_t* items);
proxypass_servers_item_locations_t* create_proxypass_servers_item_locations(njt_pool_t *pool, size_t nelts);
void set_proxypass_servers_item_locations(proxypass_servers_item_t* obj, proxypass_servers_item_locations_t* field);
proxypass_servers_item_t* create_proxypass_servers_item(njt_pool_t *pool);
int add_item_proxypass_servers(proxypass_servers_t *src, proxypass_servers_item_t* items);
proxypass_servers_t* create_proxypass_servers(njt_pool_t *pool, size_t nelts);
void set_proxypass_servers(proxypass_t* obj, proxypass_servers_t* field);
proxypass_t* create_proxypass(njt_pool_t *pool);
proxypass_t* json_parse_proxypass(njt_pool_t *pool, const njt_str_t *json_string, js2c_parse_error_t *err_ret);
njt_str_t* to_json_proxypass(njt_pool_t *pool, proxypass_t *out, njt_int_t flags);
#endif /* NJT_HTTP_DYN_PROXY_PASS_PARSER_H */
