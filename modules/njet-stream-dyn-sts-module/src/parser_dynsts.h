

/* This file was generated by JSON Schema to C.
 * Any changes made to it will be lost on regeneration. 

 * Copyright (C) 2021-2023  TMLake(Beijing) Technology Co., Ltd.
 */

#ifndef PARSER_DYNSTS_H
#define PARSER_DYNSTS_H
#include <stdint.h>
#include <stdbool.h>
#include "njt_core.h"
#include "js2c_njet_builtins.h"
/* ===================== Generated type declarations ===================== */
typedef njt_str_t dynsts_servers_item_listens_item_t;

typedef njt_array_t  dynsts_servers_item_listens_t;
typedef bool dynsts_servers_item_server_traffic_status_t;
typedef njt_str_t dynsts_servers_item_server_traffic_status_filter_by_set_key_item_t;

typedef njt_array_t  dynsts_servers_item_server_traffic_status_filter_by_set_key_t;
typedef struct dynsts_servers_item_t_s {
    dynsts_servers_item_listens_t *listens;
    dynsts_servers_item_server_traffic_status_t server_traffic_status;
    dynsts_servers_item_server_traffic_status_filter_by_set_key_t *server_traffic_status_filter_by_set_key;
    unsigned int is_listens_set:1;
    unsigned int is_server_traffic_status_set:1;
    unsigned int is_server_traffic_status_filter_by_set_key_set:1;
} dynsts_servers_item_t;

typedef njt_array_t  dynsts_servers_t;
typedef struct dynsts_t_s {
    dynsts_servers_t *servers;
    unsigned int is_servers_set:1;
} dynsts_t;

dynsts_servers_item_listens_item_t* get_dynsts_servers_item_listens_item(dynsts_servers_item_listens_t *out, size_t idx);
dynsts_servers_item_server_traffic_status_filter_by_set_key_item_t* get_dynsts_servers_item_server_traffic_status_filter_by_set_key_item(dynsts_servers_item_server_traffic_status_filter_by_set_key_t *out, size_t idx);
// CHECK ARRAY not exceeding bounds before calling this func
dynsts_servers_item_listens_t* get_dynsts_servers_item_listens(dynsts_servers_item_t *out);
dynsts_servers_item_server_traffic_status_t get_dynsts_servers_item_server_traffic_status(dynsts_servers_item_t *out);
// CHECK ARRAY not exceeding bounds before calling this func
dynsts_servers_item_server_traffic_status_filter_by_set_key_t* get_dynsts_servers_item_server_traffic_status_filter_by_set_key(dynsts_servers_item_t *out);
dynsts_servers_item_t* get_dynsts_servers_item(dynsts_servers_t *out, size_t idx);
// CHECK ARRAY not exceeding bounds before calling this func
dynsts_servers_t* get_dynsts_servers(dynsts_t *out);
int add_item_dynsts_servers_item_listens(dynsts_servers_item_listens_t *src, dynsts_servers_item_listens_item_t* items);
dynsts_servers_item_listens_t* create_dynsts_servers_item_listens(njt_pool_t *pool, size_t nelts);
void set_dynsts_servers_item_listens(dynsts_servers_item_t* obj, dynsts_servers_item_listens_t* field);
void set_dynsts_servers_item_server_traffic_status(dynsts_servers_item_t* obj, dynsts_servers_item_server_traffic_status_t field);
int add_item_dynsts_servers_item_server_traffic_status_filter_by_set_key(dynsts_servers_item_server_traffic_status_filter_by_set_key_t *src, dynsts_servers_item_server_traffic_status_filter_by_set_key_item_t* items);
dynsts_servers_item_server_traffic_status_filter_by_set_key_t* create_dynsts_servers_item_server_traffic_status_filter_by_set_key(njt_pool_t *pool, size_t nelts);
void set_dynsts_servers_item_server_traffic_status_filter_by_set_key(dynsts_servers_item_t* obj, dynsts_servers_item_server_traffic_status_filter_by_set_key_t* field);
dynsts_servers_item_t* create_dynsts_servers_item(njt_pool_t *pool);
int add_item_dynsts_servers(dynsts_servers_t *src, dynsts_servers_item_t* items);
dynsts_servers_t* create_dynsts_servers(njt_pool_t *pool, size_t nelts);
void set_dynsts_servers(dynsts_t* obj, dynsts_servers_t* field);
dynsts_t* create_dynsts(njt_pool_t *pool);
dynsts_t* json_parse_dynsts(njt_pool_t *pool, const njt_str_t *json_string, js2c_parse_error_t *err_ret);
njt_str_t* to_json_dynsts(njt_pool_t *pool, dynsts_t *out, njt_int_t flags);
#endif /* PARSER_DYNSTS_H */
