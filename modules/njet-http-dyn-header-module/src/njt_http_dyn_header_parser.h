

/* This file was generated by JSON Schema to C.
 * Any changes made to it will be lost on regeneration. 

 * Copyright (C) 2021-2023  TMLake(Beijing) Technology Co., Ltd.
 */

#ifndef NJT_HTTP_DYN_HEADER_PARSER_H
#define NJT_HTTP_DYN_HEADER_PARSER_H
#include <stdint.h>
#include <stdbool.h>
#include "njt_core.h"
#include "js2c_njet_builtins.h"
/* ===================== Generated type declarations ===================== */
typedef struct dynheaders_locationDef_t_s dynheaders_locationDef_t; //forward decl for public definition
typedef njt_str_t dynheaders_locationDef_location_t;

typedef njt_str_t dynheaders_locationDef_headers_item_key_t;

typedef njt_str_t dynheaders_locationDef_headers_item_value_t;

typedef int64_t dynheaders_locationDef_headers_item_always_t;
typedef struct dynheaders_locationDef_headers_item_t_s {
    dynheaders_locationDef_headers_item_key_t key;
    dynheaders_locationDef_headers_item_value_t value;
    dynheaders_locationDef_headers_item_always_t always;
    unsigned int is_key_set:1;
    unsigned int is_value_set:1;
    unsigned int is_always_set:1;
} dynheaders_locationDef_headers_item_t;

typedef njt_array_t  dynheaders_locationDef_headers_t;
typedef dynheaders_locationDef_t dynheaders_locationDef_locations_item_t; //ref def
typedef njt_array_t  dynheaders_locationDef_locations_t;
typedef struct dynheaders_locationDef_t_s {
    dynheaders_locationDef_location_t location;
    dynheaders_locationDef_headers_t *headers;
    dynheaders_locationDef_locations_t *locations;
    unsigned int is_location_set:1;
    unsigned int is_headers_set:1;
    unsigned int is_locations_set:1;
} dynheaders_locationDef_t;

dynheaders_locationDef_headers_item_key_t* get_dynheaders_locationDef_headers_item_key(dynheaders_locationDef_headers_item_t *out);
dynheaders_locationDef_headers_item_value_t* get_dynheaders_locationDef_headers_item_value(dynheaders_locationDef_headers_item_t *out);
dynheaders_locationDef_headers_item_always_t get_dynheaders_locationDef_headers_item_always(dynheaders_locationDef_headers_item_t *out);
dynheaders_locationDef_headers_item_t* get_dynheaders_locationDef_headers_item(dynheaders_locationDef_headers_t *out, size_t idx);
dynheaders_locationDef_locations_item_t* get_dynheaders_locationDef_locations_item(dynheaders_locationDef_locations_t *out, size_t idx);
dynheaders_locationDef_location_t* get_dynheaders_locationDef_location(dynheaders_locationDef_t *out);
// CHECK ARRAY not exceeding bounds before calling this func
dynheaders_locationDef_headers_t* get_dynheaders_locationDef_headers(dynheaders_locationDef_t *out);
// CHECK ARRAY not exceeding bounds before calling this func
dynheaders_locationDef_locations_t* get_dynheaders_locationDef_locations(dynheaders_locationDef_t *out);
void set_dynheaders_locationDef_location(dynheaders_locationDef_t* obj, dynheaders_locationDef_location_t* field);
void set_dynheaders_locationDef_headers_item_key(dynheaders_locationDef_headers_item_t* obj, dynheaders_locationDef_headers_item_key_t* field);
void set_dynheaders_locationDef_headers_item_value(dynheaders_locationDef_headers_item_t* obj, dynheaders_locationDef_headers_item_value_t* field);
void set_dynheaders_locationDef_headers_item_always(dynheaders_locationDef_headers_item_t* obj, dynheaders_locationDef_headers_item_always_t field);
dynheaders_locationDef_headers_item_t* create_dynheaders_locationDef_headers_item(njt_pool_t *pool);
int add_item_dynheaders_locationDef_headers(dynheaders_locationDef_headers_t *src, dynheaders_locationDef_headers_item_t* items);
dynheaders_locationDef_headers_t* create_dynheaders_locationDef_headers(njt_pool_t *pool, size_t nelts);
void set_dynheaders_locationDef_headers(dynheaders_locationDef_t* obj, dynheaders_locationDef_headers_t* field);
int add_item_dynheaders_locationDef_locations(dynheaders_locationDef_locations_t *src, dynheaders_locationDef_locations_item_t* items);
dynheaders_locationDef_locations_t* create_dynheaders_locationDef_locations(njt_pool_t *pool, size_t nelts);
void set_dynheaders_locationDef_locations(dynheaders_locationDef_t* obj, dynheaders_locationDef_locations_t* field);
dynheaders_locationDef_t* create_dynheaders_locationDef(njt_pool_t *pool);
typedef njt_str_t dynheaders_servers_item_listens_item_t;

typedef njt_array_t  dynheaders_servers_item_listens_t;
typedef njt_str_t dynheaders_servers_item_serverNames_item_t;

typedef njt_array_t  dynheaders_servers_item_serverNames_t;
typedef dynheaders_locationDef_t dynheaders_servers_item_locations_item_t; //ref def
typedef njt_array_t  dynheaders_servers_item_locations_t;
typedef struct dynheaders_servers_item_t_s {
    dynheaders_servers_item_listens_t *listens;
    dynheaders_servers_item_serverNames_t *serverNames;
    dynheaders_servers_item_locations_t *locations;
    unsigned int is_listens_set:1;
    unsigned int is_serverNames_set:1;
    unsigned int is_locations_set:1;
} dynheaders_servers_item_t;

typedef njt_array_t  dynheaders_servers_t;
typedef struct dynheaders_t_s {
    dynheaders_servers_t *servers;
    unsigned int is_servers_set:1;
} dynheaders_t;

dynheaders_servers_item_listens_item_t* get_dynheaders_servers_item_listens_item(dynheaders_servers_item_listens_t *out, size_t idx);
dynheaders_servers_item_serverNames_item_t* get_dynheaders_servers_item_serverNames_item(dynheaders_servers_item_serverNames_t *out, size_t idx);
dynheaders_servers_item_locations_item_t* get_dynheaders_servers_item_locations_item(dynheaders_servers_item_locations_t *out, size_t idx);
// CHECK ARRAY not exceeding bounds before calling this func
dynheaders_servers_item_listens_t* get_dynheaders_servers_item_listens(dynheaders_servers_item_t *out);
// CHECK ARRAY not exceeding bounds before calling this func
dynheaders_servers_item_serverNames_t* get_dynheaders_servers_item_serverNames(dynheaders_servers_item_t *out);
// CHECK ARRAY not exceeding bounds before calling this func
dynheaders_servers_item_locations_t* get_dynheaders_servers_item_locations(dynheaders_servers_item_t *out);
dynheaders_servers_item_t* get_dynheaders_servers_item(dynheaders_servers_t *out, size_t idx);
// CHECK ARRAY not exceeding bounds before calling this func
dynheaders_servers_t* get_dynheaders_servers(dynheaders_t *out);
int add_item_dynheaders_servers_item_listens(dynheaders_servers_item_listens_t *src, dynheaders_servers_item_listens_item_t* items);
dynheaders_servers_item_listens_t* create_dynheaders_servers_item_listens(njt_pool_t *pool, size_t nelts);
void set_dynheaders_servers_item_listens(dynheaders_servers_item_t* obj, dynheaders_servers_item_listens_t* field);
int add_item_dynheaders_servers_item_serverNames(dynheaders_servers_item_serverNames_t *src, dynheaders_servers_item_serverNames_item_t* items);
dynheaders_servers_item_serverNames_t* create_dynheaders_servers_item_serverNames(njt_pool_t *pool, size_t nelts);
void set_dynheaders_servers_item_serverNames(dynheaders_servers_item_t* obj, dynheaders_servers_item_serverNames_t* field);
int add_item_dynheaders_servers_item_locations(dynheaders_servers_item_locations_t *src, dynheaders_servers_item_locations_item_t* items);
dynheaders_servers_item_locations_t* create_dynheaders_servers_item_locations(njt_pool_t *pool, size_t nelts);
void set_dynheaders_servers_item_locations(dynheaders_servers_item_t* obj, dynheaders_servers_item_locations_t* field);
dynheaders_servers_item_t* create_dynheaders_servers_item(njt_pool_t *pool);
int add_item_dynheaders_servers(dynheaders_servers_t *src, dynheaders_servers_item_t* items);
dynheaders_servers_t* create_dynheaders_servers(njt_pool_t *pool, size_t nelts);
void set_dynheaders_servers(dynheaders_t* obj, dynheaders_servers_t* field);
dynheaders_t* create_dynheaders(njt_pool_t *pool);
dynheaders_t* json_parse_dynheaders(njt_pool_t *pool, const njt_str_t *json_string, js2c_parse_error_t *err_ret);
njt_str_t* to_json_dynheaders(njt_pool_t *pool, dynheaders_t *out, njt_int_t flags);
#endif /* NJT_HTTP_DYN_HEADER_PARSER_H */
