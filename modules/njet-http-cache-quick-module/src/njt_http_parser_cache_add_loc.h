

/* This file was generated by JSON Schema to C.
 * Any changes made to it will be lost on regeneration. 

 * Copyright (C) 2021-2023  TMLake(Beijing) Technology Co., Ltd.
 */

#ifndef PARSER_CACHE_ADD_LOC_H
#define PARSER_CACHE_ADD_LOC_H
#include <stdint.h>
#include <stdbool.h>
#include "njt_core.h"
#include "js2c_njet_builtins.h"
/* ===================== Generated type declarations ===================== */
typedef enum cache_add_dyn_location_type_t_e{
    CACHE_ADD_DYN_LOCATION_TYPE_ADD
} cache_add_dyn_location_type_t;

typedef njt_str_t cache_add_dyn_location_addr_port_t;

typedef njt_str_t cache_add_dyn_location_server_name_t;

typedef njt_str_t cache_add_dyn_location_locations_item_location_rule_t;

typedef njt_str_t cache_add_dyn_location_locations_item_location_name_t;

typedef njt_str_t cache_add_dyn_location_locations_item_location_body_t;

typedef njt_str_t cache_add_dyn_location_locations_item_proxy_pass_t;

typedef struct cache_add_dyn_location_locations_item_t_s {
    cache_add_dyn_location_locations_item_location_rule_t location_rule;
    cache_add_dyn_location_locations_item_location_name_t location_name;
    cache_add_dyn_location_locations_item_location_body_t location_body;
    cache_add_dyn_location_locations_item_proxy_pass_t proxy_pass;
    unsigned int is_location_rule_set:1;
    unsigned int is_location_name_set:1;
    unsigned int is_location_body_set:1;
    unsigned int is_proxy_pass_set:1;
} cache_add_dyn_location_locations_item_t;

typedef njt_array_t  cache_add_dyn_location_locations_t;
typedef struct cache_add_dyn_location_t_s {
    cache_add_dyn_location_type_t type;
    cache_add_dyn_location_addr_port_t addr_port;
    cache_add_dyn_location_server_name_t server_name;
    cache_add_dyn_location_locations_t *locations;
    unsigned int is_type_set:1;
    unsigned int is_addr_port_set:1;
    unsigned int is_server_name_set:1;
    unsigned int is_locations_set:1;
} cache_add_dyn_location_t;

cache_add_dyn_location_locations_item_location_rule_t* get_cache_add_dyn_location_locations_item_location_rule(cache_add_dyn_location_locations_item_t *out);
cache_add_dyn_location_locations_item_location_name_t* get_cache_add_dyn_location_locations_item_location_name(cache_add_dyn_location_locations_item_t *out);
cache_add_dyn_location_locations_item_location_body_t* get_cache_add_dyn_location_locations_item_location_body(cache_add_dyn_location_locations_item_t *out);
cache_add_dyn_location_locations_item_proxy_pass_t* get_cache_add_dyn_location_locations_item_proxy_pass(cache_add_dyn_location_locations_item_t *out);
cache_add_dyn_location_locations_item_t* get_cache_add_dyn_location_locations_item(cache_add_dyn_location_locations_t *out, size_t idx);
cache_add_dyn_location_type_t get_cache_add_dyn_location_type(cache_add_dyn_location_t *out);
cache_add_dyn_location_addr_port_t* get_cache_add_dyn_location_addr_port(cache_add_dyn_location_t *out);
cache_add_dyn_location_server_name_t* get_cache_add_dyn_location_server_name(cache_add_dyn_location_t *out);
// CHECK ARRAY not exceeding bounds before calling this func
cache_add_dyn_location_locations_t* get_cache_add_dyn_location_locations(cache_add_dyn_location_t *out);
void set_cache_add_dyn_location_type(cache_add_dyn_location_t* obj, cache_add_dyn_location_type_t field);
void set_cache_add_dyn_location_addr_port(cache_add_dyn_location_t* obj, cache_add_dyn_location_addr_port_t* field);
void set_cache_add_dyn_location_server_name(cache_add_dyn_location_t* obj, cache_add_dyn_location_server_name_t* field);
void set_cache_add_dyn_location_locations_item_location_rule(cache_add_dyn_location_locations_item_t* obj, cache_add_dyn_location_locations_item_location_rule_t* field);
void set_cache_add_dyn_location_locations_item_location_name(cache_add_dyn_location_locations_item_t* obj, cache_add_dyn_location_locations_item_location_name_t* field);
void set_cache_add_dyn_location_locations_item_location_body(cache_add_dyn_location_locations_item_t* obj, cache_add_dyn_location_locations_item_location_body_t* field);
void set_cache_add_dyn_location_locations_item_proxy_pass(cache_add_dyn_location_locations_item_t* obj, cache_add_dyn_location_locations_item_proxy_pass_t* field);
cache_add_dyn_location_locations_item_t* create_cache_add_dyn_location_locations_item(njt_pool_t *pool);
int add_item_cache_add_dyn_location_locations(cache_add_dyn_location_locations_t *src, cache_add_dyn_location_locations_item_t* items);
cache_add_dyn_location_locations_t* create_cache_add_dyn_location_locations(njt_pool_t *pool, size_t nelts);
void set_cache_add_dyn_location_locations(cache_add_dyn_location_t* obj, cache_add_dyn_location_locations_t* field);
cache_add_dyn_location_t* create_cache_add_dyn_location(njt_pool_t *pool);
cache_add_dyn_location_t* json_parse_cache_add_dyn_location(njt_pool_t *pool, const njt_str_t *json_string, js2c_parse_error_t *err_ret);
njt_str_t* to_json_cache_add_dyn_location(njt_pool_t *pool, cache_add_dyn_location_t *out, njt_int_t flags);
#endif /* PARSER_CACHE_ADD_LOC_H */
